---
title: "<img alt='webR logo' width='700px' src='images/webr-shiny.png'></img><br>Shiny Without a Server:<br><code>webR</code> & <code>shinylive</code>"
author: "Andrie de Vries, Posit PBC"
format:
  revealjs:
    theme:
     - "default"
     - "custom.scss"
    width: "1600"
    height: "900"
    mermaid:
      theme: default
    mermaid-format: png
revealjs-plugins:
  - ace
filters:
  - shinylive
---

# Running Shiny without a server!

```{=html}
<script src="webr-reveal.js"></script>
```
But what is a "server" anyhow?

## Traditional Shiny architecture

A server is a machine, connected to the Internet, that runs 24/7 ready to run your Shiny app.


::: {style="text-align: center;"}
![](images/server-side.png){style="width:55%"}
:::


<br> Wouldn't it be great if we could run Shiny apps using static hosting?

## Shinylive architecture

::: {style="text-align: center;"}
![](images/client-side.png){style="width:55%"}
:::


## WebR

![](images/webr.png){alt="The webR logo" height="350" fig-align="center"}

::: {style="text-align: center"}
[WebR](https://docs.r-wasm.org/) is a version of the R interpreter built for WebAssembly

Execute R code directly in a web browser, [without a supporting R server]{.em}

<br>Alternatively, run an R process [server-side]{.em} using Node.js
:::

# Uses for webR without Shiny

We'll come back to Shiny apps later!

## WebR Demo Application [ðŸ”— <https://webr.r-wasm.org/v0.2.1/>]{style="font-size: 50%"}

<iframe class="web zoomed" allow="cross-origin-isolated" width="80%" height="70%" src="https://webr.r-wasm.org/v0.2.1/">

</iframe>


## The webR Quarto extension

-   Knowledge of web development is not required to use webR in your own content

:::: {.columns}

::: {.column width="50%"}
In a terminal:
<br>

``` shell
quarto add coatless/quarto-webr
```


<br>
In a Quarto doc:

```` markdown
```{webr-r}
fit = lm(mpg ~ am, data = mtcars)
summary(fit)
```
````
:::

::: {.column width="50%"}
This is it:

```{=html}
<script>
  insertAceWebR(
  document.currentScript,
    `penguins |>
  group_by(species, island) |>
  summarise(
    avg_mass = mean(body_mass_g, na.rm = TRUE)
  )`,
    { height: 150, canvas: { width: 1000, height: 700 } }
  );
</script>
```

:::

::::



## Live and interactive R plotting

```{=html}
<script>
  insertAceWebR(
  document.currentScript,
    `
    penguins |>
      ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
      geom_point(aes(color = species, shape = species), size = 3, na.rm = TRUE) +
      labs(title = "Penguin size, Palmer Station LTER",
        subtitle = "Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins",
        x = "Flipper length (mm)", y = "Body mass (g)",
        color = "Penguin species", shape = "Penguin species"
      )`,
    { height: 250, canvas: { width: 1000, height: 500 } }
  );
</script>
```

## R packages

- Binary R packages for Wasm are available, hosed at <https://repo.r-wasm.org>
- **webR 0.2.1:** 10324 packages (about 51% of CRAN) 
- Note: not all have been tested

::: {style="text-align: center"}
![](images/repo.png){style="width: 50%"}
:::


# Getting started with Shinylive for R

Anyone can create their own serverless Shiny apps!

## Anyone can create their own serverless Shiny apps!

1. [Shinylive online editor](https://shinylive.io/r/examples/)

2. [Convert a Shiny app](https://github.com/posit-dev/r-shinylive)

3. [Embed a Shiny app with Quarto](https://github.com/quarto-ext/shinylive)

## Shinylive Online editor [ðŸ”— <https://shinylive.io/r/examples/>]{style="font-size: 50%"}

::: {style="text-align: center"}
![](images/shinylive-editor.png){style="width: 90%; border: 1px solid #889; box-shadow: 2px 2px 15px #889;"}
:::

## Shinylive Online editor: Sharing apps

::: {style="text-align: center"}
![](images/share.png){style="width: 60%"}
:::

Share a Shiny app with anyone using a single URL: [Example Shinylive App](https://shinylive.io/r/editor/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKAZwAtaJWAlAB0IdJiw4ATKKSic4pTsIgiAxAAIAIjKjrUjOAFp9RAnE6c+Ac3WG7hteoAqAdzhQA1utLc46oSgwAeoAbiy0UPTUfqRE6txQIX4QtGaM6gBmUASx6dSRcNSctobqlhBm3rycjpJE5hAA5KTqBtSs6iTqUPzqAK7y6XyofYq46m7qBD3qdVW0xSSVMmWyjKR9qI49klUU-fJ7oVDUfTHcjER9VtxXLT5+dBkKtPCdGUdoWxAwqFbasnUAB5SjBSNNGDUfn8AVAACSwYGlLI5IiMdi-f46BEwcb5eiFYoAXim7ACAEFRkQYDJUgFxgEALI9PonAICZQiRyaOAZPh+ACqAElMmj1DBaNFiqg4OkrCdqF0viU7CI+rQkZlTrRJAAFKBWOBklQQdTqDTk9DeWikaIqhym622uD6iCFMlgRmS8zqXWy9QAcQVJHZuC5jo0AGUdXB6Cx1PlWHcJjbuOphqNuhBdncRi1JLy+DbaCRivYHWbLAW44wADJQJOjY0iM1mqMxmt6HqFUVDCB5sv2Futquxliu93h1utjRC-ujRDqSOFOCo9IZMVhRgRKIxOKoRUtA1QPicFqY+3D6fyaI5Od5j1bnfRen+MAANXCkWiiHpV+nAGAQQHoAMKsHQ2ayjUYDqCSAQEOBf6OoBKEAQETjMBAnAShYJYqDBcGBEhqEka2AQBu4kLBIRhosOyAhhiagGzvOpCLiBvgEB49BEAAHr2Ey+A86R3HQUFlLcfTULsBLphUpwFrs5b-maBCcdxfH3k2ASibQUGvgEka3C4nSjGJVF4M4WACgAopyyHqAxU4zuozJ8F2brUAJkgLAeDbWKZpADpeDk0nwE7UM2DltuoADyox5ouABiaI0qQ5C7OQvEtBu6TTKgpB4SFgHcAAzOwWWkPFQXaYQaCFSGYAcoxKnmnFCULr6h7vEcBgAI5nGecC7E+35+Mep7nn8xUAQeRBVR1pAepiuqHuyzlmsom0iPZGg8nybplLKSR5EQVipN4+7dU+VzFKNu7FBNWFTTYylYcd-ogpkfQVA1EDsBmpDjLmowCOoIDORoIHUnm5x+LlMBSbolUzRoTjVOmxTuboBjZIVSTqHAvH6OYlhdOUlQ2pjEksMN6j0B0DzDhoIOkHC+V-VmOaLXCK3dRkP05HhUJmgjSNOETLRfbjQtJOwEMOagcjkMt00AH6voDcL3dEW3qAAvvZMVYAofSMKaDy9oj+TeJLAn6HwhUQDYcjdFM9VFW9Zqs+zHtdNLFAFowEvZfL-5i-kIdLXrhuQ4GFCyjI416N1RAfJb-WDRlxzbmN3TypN4rTV7bU7J0ogdETBAKX4unibQHyZ+YGXDj7fPzZqBiQYwq3zWHDk8cTh7sHIGAR1A7Dj1H7DNa1gHSICJKYrCjGkd7Zn8rBcl5nCdeQqva-EF5hGqAA7AArOS5KaAAQq+qBqVvACMACcMf2fr4ZQ7j5BLrwvTKjejwPgrBLSoHYOqcYgwTrKDAPrAAukAA)

<br>Share a Shiny app from a GitHub Gist: <https://shinylive.io/py/app/#gist=e62218aa28bf26e785fc6cb99efe8efe>

<small>[ðŸ”— App source code](https://gist.github.com/wch/e62218aa28bf26e785fc6cb99efe8efe)</small>

## Shinylive Quarto extension

First, in a terminal run the command:

``` shell
quarto add quarto-ext/shinylive
```


Insert your app into the Quarto document using a `{shinylive-r} chunk

```` {.md code-line-numbers="5-19"}
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo.

```{shinylive-r}
#| standalone: true
library(shiny)

# Create Shiny UI
ui <- [...]

# Create Shiny server function
server <- function(input, output, session) {
  [...]
}

# Build Shiny app
shinyApp(ui = ui, server = server)
```

Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit laborum.
````

## Shiny running live in the browser

```{shinylive-r}
#| standalone: true
#| viewerHeight: 700

library(shiny)
library(bslib)

theme <- bs_theme(font_scale = 1.5)

# Define UI for app that draws a histogram ----
ui <- page_sidebar(theme = theme,
  sidebar = sidebar(open = "open",
    numericInput("n", "Sample count", 50),
    checkboxInput("pause", "Pause", FALSE),
  ),
  plotOutput("plot", width=1100)
)

server <- function(input, output, session) {
  data <- reactive({
    input$resample
    if (!isTRUE(input$pause)) {
      invalidateLater(1000)
    }
    rnorm(input$n)
  })
  
  output$plot <- renderPlot({
    hist(data(),
      breaks = 30,
      xlim = c(-2, 2),
      ylim = c(0, 1),
      xlab = "value",
      freq = FALSE,
      main = ""
    )
    
    x <- seq(from = -2, to = 2, length.out = 500)
    y <- dnorm(x)
    lines(x, y, lwd=1.5)
    
    lwd <- 5
    abline(v=0, col="red", lwd=lwd, lty=2)
    abline(v=mean(data()), col="blue", lwd=lwd, lty=1)

    legend(legend = c("Normal", "Mean", "Sample mean"),
      col = c("black", "red", "blue"),
      lty = c(1, 2, 1),
      lwd = c(1, lwd, lwd),
      x = 1,
      y = 0.9
    )
  }, res=140)
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```

## Future work and current issues

-   Shinylive is [experimental!]{.em} Things are still very much in flux

-   Loading R packages works, but is very slow. We're working on it!

-   Not all R packages work in Wasm

-   Browser security restrictions: very limited networking, no raw socket access

-   Moving data into and out of the virtual Wasm environment is clunky right now (at best!)

-   There are no secrets with a Shinylive app!

------------------------------------------------------------------------

### ðŸ”— webR demo website {style="padding-top: 1em;"}

<https://webr.r-wasm.org/v0.2.1/>

### ðŸŒŽ Shinylive for R examples {style="padding-top: 1em;"}

<https://shinylive.io/r/>

### ðŸ“¦ NPM (for JS Developers) {style="padding-top: 1em;"}

`npm install webr`

### ðŸ“™ Docs {style="padding-top: 1em;"}

<https://docs.r-wasm.org/webr/v0.2.1/>

<https://github.com/posit-dev/shinylive>

<https://github.com/quarto-ext/shinylive>